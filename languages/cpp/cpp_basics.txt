// pragma once 

  #pragma once, is a non-standard yet widely supported alternative for #ifndef file guards
  most modern compliers support it, it is said it can be faster for compilers that support it since it uses some kind of caching but I didn't find any source supporting it
  one advantage I can think of it prevents the accidental case where when using #ifdef _UNIQUE_NAME_ if the <_unique_name_> is repeated it will not work as expected, #pragma once, avoids this

// ---

// ifndef

  #ifndef name or #if !defined name
  #define name
  ...
  #endif
  it is a preprocessor to prevent the same header file from being included multiple times in the cpp file which could otherwise cause errors (redeclaration and so on...)
  this is called multiple include optimization

// ---

// compilation

  the preprocessor basically takes the cpp file, expands all the direct and indirect #include statements minus the the lines ignored by conditional preprocessing statements, this is called the "translation unit"
  it is then passed the entire file to the compiler
  lets assume we have class.h, class.cpp and main.cpp and main.cpp includes class.h
  while compiling main.cpp the compiler gets the declarations for class.cpp via class.h and it compiles main.cpp into some object file let it be main.obj, all the unresolved variables and functions are replaced with references
  the compiler compiles class.cpp into some object file let it be class.obj
  to produce the final exectuable both these files are linked by the linker to produce the final executable 
  note the entire file is not just blindly added as far as I have read it depends on the linker and the optimization flags used
  'cheap linkers' just copy everything even if it isn't refernced, others with the appropriate flags build builds a recursive list of which object modules are needed and included those items only

// ---


// namespace
  namespace a {void f();}
  namespace b {
    a::f() {} // this definition is wrong, we cannot define it in another namespace
  }

  if namespace too long like a::b::c::d:: and so on .. we can do namespace shortername = a::b::c:: and so on ..

  using namespace std; is *very* bad not just for readable reasons you can also call the wrong function accidently like for ex: 
  std::distance becomes distance or std::swap becomes swap and so error if you used swap() expecting something else
  if you really want to use it, do it with select object like for ex: using std::string
  this is because of the interface principle, 
  basically 
  for ex:
  namespace ns {  
    class A {};
    void print (A a) {}
  } // namespace ns
  using this in code
  ns::A a;
  print(a)
  here we don't have to specify the namespace while calling the function because C++ considers a function taking a type as an argument as being part of the interface for that type, so no need to specify the namespace because the 
  parameter implies the namespace
  or another explanation I found which I think is correct I am not sure
  you don't have to qualify the namespace for functions if one or more argument types are defined in the namespace of the function
  now lets assume namespace ns did not have a print function given, so we create it ourselves to use it in our own namespace
  ex:
  namespace ns {
    class A {};
  }
  void print (A a) {};
  now this works fine, but if one day a print function is defined in namespace ns it will use that function rather than the one provided by us. therefore it can cause unexpected behavior, my compiler just throws ambigous error.

  inline namspace
  kind of a way to do versioning
  nested inline spaces look and act as if they were declared in non-inline parent namespace, there can be nested inline namespace and all of them percolate upwards to the first non-inline namespace
  example to understand usage:

  namespace std {
    #if __cplusplus < 1997L // pre-standand cpp
      inline
    #endif
      namespace pre_cxx_1977 {
        ...
      }
    #if __cplusplus >= 1997L 
      inline
    #endif
      namespace cxx_1977L {
        ...
      }
  }

  anonymous namespace
	can't be seen outside of the file in which the unamed namespace is defined
  it is actually given a unique name unique to the program, which is same throughout the file
  therefore within a translation unit each unamed defintion maps to the same unique name
  namespace{ 
		int i; // defines ::(unique)::i
	}

	namespace A {
		namespace {
			int j; // deines ::A::(unique)::j
		}
	}

  all content declared inside an anonymous namespace is treated as if part of the parent namespace
	or
	an anonymous namespace is automatically brought into the containing scope

// ---

// compile time assert
	static_assert(condition, "error message")
	
	static_assert(sizeof(int) == 4, "size of int must be 4 bytes")

// ---

// run time assert

	assert(expression)
	assert(var == 3)

// --- 

// constexpr
	constexpr specifies that these entities can be evaluated at compile time
	a constexpr variable is implicity a const
	a constexpr function is also implicitly inline
	a constexpr func is evaluated at compile time if its parameters are constants knownn at compile time

	constexpr var
		must be defined at compile time
		constexpr int var = 1;
	
	constexpr func
		may or not be executed at compile time, to evaluate at compile time all the parameters should be compile time known and result should be stored in a compile time variable 
		constexpr int func(){}
	
	constexpr template
		template <constexpr int n>
		int func(){}

	constexpr constructors
		creates constant objects at compile time if all the constructor arguments are compile time constants

		constexpr Class(arguments) : init list {}
	
	cosntexpr pointers
		both the pointer and the value it points to must be known at compile time
		constexpr int x = 2;
		constexpr const int* ptr = &x;

// ---


// pointers and memory 

	de-reference takes two memory lookups 	
		go to address of pointer, then go to the address stored by the pointer
	
	there are two ways to instantiate an object in cpp
		1. ClassName* p = new ClassName;
			 new ClassName creates an object and returns its address which is stored in pointer p
			 note: here the object is created on the heap
		2. ClassName p;
			 creates a new object and variable p directly names the object
			 note: here the object is created on the stack

	main memory/RAM have many gigabytes of ram and each byte of memory has a unique address, we can think of RAM as a contigous array of bytes and addresses as the index of bytes.
	most variables are larger than one byte, so address of each variable is the address of the first byte of that variable.

	how variables are handled by compilers
		1. when variables occur on the left side of assignment operator, the compiler uses the address or l-value
		2. when variables occur on the right side of assignment operator, the compiler uses the value or r-value

		this is also called as being context sensitive, since the meaning of the variable symbol as interpreted by the compiler depends on where it appears in the program

	memory organization of a process
		| - heap
		|    |
		|    V
		|
		|
		|    T
		|    |
		| - stack
		| - static and 
		| - global variables
		| - machine code for process
		
		therefore memory is managed in three logical memory regions
			1. where global and static data is stored, it is stored when the process starts and is stored for the lifetime of the process
			2. stack, stores all the automatic(non-static) data, grows as needed
			3. heap, stores all the data allocated using new and delete, grows as needed
		
		the heap is more flexibile than the stack, stack only allows allocation and deallocation from the top whereas the heap allows allocation and deallocation from anywhere thus heaps can have "holes"
		this makes stack more simpler and heap more complex since when heap involves more computations
			for ex:
				when allocating the heap must be scanned to find a contigous block of memory which can meet demand for allocation
				when deallocating the help must check whether neighbouring blocks are non-allocated if so they must coalesce

		intersting thing
		since the pointer is itself an automatic variable, it is stored on the stack while the block of memory it points to is stored on heap

	
		stack
			automatic variables are automatically allocated when the come in scope and deallocated when they leave scope on the stack	

		heap
			block of memory allocated is independent of scope, so just because scope is exited doesn't mean memory is deallocated
			new
				allocates memory on the heap
				not really used for small data types like char, int, double preferred for arrays, structures and objects
				it executes 3 things
					.) it allocates memory on the heap
					.) if datatype is an object, calls the constructor
					.) returns the address

				ex:
					char* 	   c = new char; // not useful
					double* 	 scores = new double[size]
					ClassName* ptr = new ClassName;

			delete
				deallocates memory on the heap
				ex:
					delete c; // where c is a char pointer
					delete[] scores; // for array, [] needed to call destructors of elements

				common error with delete
					'delete' a value that doesn't point to memory allcoated on the heap
					ex:
						.)	
							ClassName* p;
							delete p; // error since p not initialized

						.)
							ClassName obj;
							ClassName* p = &obj;
							delete p; // error since obj is allocated on stack NOT heap


		in c++ heap memory must be explicitly de-allocated
		memory leak
			if ptr is lost before heap is de-allocated that block of memory becomes garbage and unaccessible
		automatic garbage collection
			to avoid memory leaks, languages like java provide automatic garbage collection
			java's automatic garbage collection follows the following steps
				1. mark all data allocated using new as garbage
				2. goes through all pointers and removes mark of garbage from all reachable data 
				3. frees all the garbage data and returns to heap

		pointer arithmetic
			applicable in a contigous block of memory
			.) pointer + int
			.) pointer - int
			.) pointer2 - pointer1

			pointer + int and  pointer - int -> gives a new address that points to another element 
			pointer2 - pointer1 -> calculates number of elements between the two pointers

			since data type can be more than 1 byte there are implicit calculations
			i.e 
				pointer + or - int -> pointer + or - int*sizeof(datatype)
					so if datatype is integer
					pointer + int will give a pointer that points to the next int
					if this was no the case we would just jump to the next byte of the same int element
				
				pointer2 - pointer1 -> (pointer2 - pointer1)/sizeof(datatype)
					since we want to know number of elements not the number of bytes

// ---

// nullptr

	to denote that a pointer doesn't point to anything c++ provides 3 methods
	ptr = nullptr; // preferred
	ptr = NULL;
	ptr = 0;

// --- 


// secure programming practices with pointers

	initialize pointers to nullptr if no value known, since if not initialized it contains random bit
		Class* ptr = nullptr;

	check for nullptr
		it is not possible to access data via a nullptr
			if (p == nullptr)
				cerr << .....
		
// ---

// const pointer and pointer to const
	pointer to constant type
		const int* ptr
	
	constant pointer to type
		int* const ptr;
	
// ---

// smart pointers
	with raw pointers the programmer is responsible for allocation and deallocation of memory
	possible erorrs with raw pointers
		memory leaks
			if a dynamically allocated object is not explicitly deleted, it remains in memory and consumes resources

		dangling pointers
			when the memory location is deallocated, the pointer is called a dangling pointer
			accessing through a the dangling pointer can lead to unexpected errors

		double deletion
			undfined beahaviour if deallocating the pointer twice

		exception safety
			if exception is thrown during resource allocation and dellocation, it can lead to resource leaks and dangling pointers

	smart pointers automatically handle object deletion

	1. unique_ptr
	2. shared_ptr
	3. weak_ptr


//

// constructor init list
		
// ---

const reference
method const {}
static function
operator overloading
convention: private var -> var_
constructor = default
method = default
#if defined

// templates

	both class and typename works
	i.e
	template<class T> OR template<typename T>

	note: template instantiation(when the compiler generates class/function from the template) happens at compile time
	for ex:
		let there be function 
		template<typename T>
		void func(T x, T y);
		the line -> func<int>(a , b) will creata function -> func(int a, int b) during compilation

	you can also use non-type template parameters
	for ex:
		template<typename T, int N>

	Templates do not generate any code on their own, they generate a template for producing code. 
	In order to actually produce code, you must instantiate the template with concrete types. 
	The compiler then takes the template, inserted the types that you provided, and generates the actual code
	If the application uses the template function with multiple data types, each type results in a different substitution, one for each type.




// ---

this
friend method
enum
enum class
explicit
assert
static
mutable 

// constructors

	default
		no parameters
		cpp by default provides a default constructor if nothing is provided
		if only a parameterized constructor is provided, default constructor is not present automatically

		classname() {}

		to create object
		classname c;
		classname* c = new classname;
		classname* c = new classname();
	
	copy constructor
		
		

// ---

oops
